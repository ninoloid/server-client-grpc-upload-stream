syntax = "proto3";

package uploader;

// gRPC service for client ↔ server file upload stream.
service Uploader {
  // Long-lived bidirectional stream.
  // Client connects and sends Hello; server can push UploadRequest messages.
  // Client then streams FileChunk messages; server replies with Complete when done.
  rpc DataStream(stream StreamMsg) returns (stream StreamMsg);

  // Command for the server to tell a specific client to upload a file by its path.
  rpc Trigger(TriggerReq) returns (TriggerRes);
}

// Unified message type for the DataStream channel.
message StreamMsg {
  oneof kind {
    Hello hello               = 1; // client → server
    ClientReady ready         = 2; // client → server (after hello)
    UploadRequest upload_req  = 3; // server → client
    FileChunk chunk           = 4; // client → server
    Complete complete         = 5; // server → client
    ErrorMsg error            = 6; // either direction
  }
}

message Hello {
  string client_id = 1;
  string secret    = 2;
}

message ClientReady {
  string client_id = 1;
}

message UploadRequest {
  string upload_id = 1; // generated by server
  string file_path = 2; // path on client to upload
}

message FileChunk {
  string upload_id = 1;
  uint64 seq       = 2; // chunk sequence number
  bytes data       = 3; // chunk content
  bool last        = 4; // true if this is the last chunk
}

message Complete {
  string upload_id = 1;
  uint64 size      = 2; // total bytes received
  string sha256    = 3; // checksum
}

message ErrorMsg {
  string upload_id = 1; // optional
  string code      = 2; // e.g. "AUTH", "NOT_FOUND", "IO"
  string message   = 3;
}

message TriggerReq {
  string client_id = 1;
  string file_path = 2;
}

message TriggerRes {
  string upload_id = 1;
  string status    = 2; // "queued" or "client_not_connected"
}
